<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>XS-Leaks Wiki</title><link>https://xsleaks.dev/docs/attacks/browser-features/</link><description>Recent content on XS-Leaks Wiki</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://xsleaks.dev/docs/attacks/browser-features/index.xml" rel="self" type="application/rss+xml"/><item><title>CORB Leaks</title><link>https://xsleaks.dev/docs/attacks/browser-features/corb/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/browser-features/corb/</guid><description>&lt;p>&lt;a href="https://xsleaks.dev/docs/defenses/secure-defaults/corb/">Cross-Origin Read Blocking&lt;/a> (CORB) is a web platform security feature aimed at reducing the impact of speculative side-channel attacks such as Spectre. Unfortunately, blocking certain types of requests introduced a new type of XS-Leaks &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that allows attackers to detect if CORB was enforced on one request, but wasn&amp;rsquo;t on another. Nevertheless, the introduced XS-Leaks are much less problematic than the issues actively protected by CORB (e.g. Spectre).&lt;/p>

 &lt;blockquote class="book-hint2 info">
 &lt;p class="hint-title info">
 &lt;svg class="book-icon">
 &lt;use href="https://xsleaks.dev/svg/hint-icons.svg#info-notice">&lt;/use>
 &lt;/svg>&lt;span>info&lt;/span>&lt;/p></description></item><item><title>CORP Leaks</title><link>https://xsleaks.dev/docs/attacks/browser-features/corp/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/browser-features/corp/</guid><description>&lt;h2 id="explanation">
 Explanation
 &lt;a class="anchor" href="#explanation">#&lt;/a>
&lt;/h2>
&lt;p>&lt;a href="https://xsleaks.dev/docs/defenses/opt-in/corp/">Cross-Origin Resource Policy&lt;/a> (CORP) is a web platform security feature that allows websites to prevent certain resources from being loaded by other origins. This protection complements &lt;a href="https://xsleaks.dev/docs/defenses/secure-defaults/corb/">CORB&lt;/a> since it is an opt-in defense, whereas CORB blocks some cross-origin reads by default. Unfortunately, similar to &lt;a href="https://xsleaks.dev/docs/attacks/browser-features/corb/">CORB&lt;/a>, applications can introduce a new XS-Leak if they misconfigure the use of this protection.&lt;/p>
&lt;p>A webpage will introduce an XS-Leak if &lt;code>CORP&lt;/code> is enforced based on user data. If a page search feature enforces &lt;code>CORP&lt;/code> when showing results, but doesn&amp;rsquo;t do so when returning no results, an attacker will be able to distinguish the two scenarios. This occurs because a page/resource protected by &lt;code>CORP&lt;/code> will return an error when fetched cross-origin. &lt;a href="https://xsinator.com/testing.html#CORP%20Leak">Run demo&lt;/a>&lt;/p></description></item></channel></rss>