<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Application Design on XS-Leaks Wiki</title><link>https://xsleaks.dev/docs/defenses/design-protections/</link><description>Recent content in Application Design on XS-Leaks Wiki</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://xsleaks.dev/docs/defenses/design-protections/index.xml" rel="self" type="application/rss+xml"/><item><title>Cache Protections</title><link>https://xsleaks.dev/docs/defenses/design-protections/cache-protections/</link><pubDate>Fri, 16 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/design-protections/cache-protections/</guid><description>&lt;p>There are a number of different approaches applications can use to defend against cache probing-based XS-Leaks. These approaches are explained in the following sections.&lt;/p>
&lt;h1 id="cache-protection-via-cache-control-headers">
 Cache Protection via &lt;code>Cache-Control&lt;/code> Headers
 &lt;a class="anchor" href="#cache-protection-via-cache-control-headers">#&lt;/a>
&lt;/h1>
&lt;p>If it is acceptable to disable caching, doing so provides a strong defense against cache probing attacks. Disabling caching means that every time someone loads a resource, the resource has to be fetched again. To disable caching, set a &lt;code>Cache-Control: no-store&lt;/code> header on every single response that you wish to protect.&lt;/p></description></item><item><title>Subresource Protections</title><link>https://xsleaks.dev/docs/defenses/design-protections/subresource-protections/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/design-protections/subresource-protections/</guid><description>&lt;p>The fundamental idea behind designing protections for subresources is that subresources cannot be targeted by XS-Leaks if the attacker cannot make them return any user data. If implemented correctly, this approach can be a very strong defense, though it is likely to be tough to implement and could negatively impact the user experience.&lt;/p>

 &lt;blockquote class="book-hint2 tip">
 &lt;p class="hint-title tip">
 &lt;svg class="book-icon">
 &lt;use href="https://xsleaks.dev/svg/hint-icons.svg#tip-notice">&lt;/use>
 &lt;/svg>&lt;span>tip&lt;/span>&lt;/p>
 It can be very effective to deploy this approach on any specific resources that are known to be especially sensitive to XS-Leaks. But, due to the challenges of deploying this protection universally, applications are encouraged to deploy &lt;a href="https://xsleaks.dev/docs/defenses/">opt-in web platform security features&lt;/a> as the default approach.
 &lt;/blockquote>


&lt;h2 id="token-based-protections">
 Token-Based Protections
 &lt;a class="anchor" href="#token-based-protections">#&lt;/a>
&lt;/h2>
&lt;p>A strong protection for subresources can be achieved by including a user-specific token in every request. This protects against most XS-Leak techniques if implemented correctly. The idea is that in order to verify a request for a resource as being legitimate, a token must be included. This token must be provided to the client in a way that prevents an attacker from including it in their own requests.&lt;/p></description></item></channel></rss>