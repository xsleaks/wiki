<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Opt-In Mechanisms on XS-Leaks Wiki</title><link>https://xsleaks.dev/docs/defenses/opt-in/</link><description>Recent content in Opt-In Mechanisms on XS-Leaks Wiki</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://xsleaks.dev/docs/defenses/opt-in/index.xml" rel="self" type="application/rss+xml"/><item><title>Fetch Metadata</title><link>https://xsleaks.dev/docs/defenses/opt-in/fetch-metadata/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/fetch-metadata/</guid><description>&lt;p>&lt;a href="https://www.w3.org/TR/fetch-metadata/">Fetch Metadata Request Headers&lt;/a> are sent by browsers with HTTPS requests. These headers provide context on how a request was initiated so that applications are able to make more informed decisions on how to respond to them. This allows servers to behave differently when they detect potential attacks (e.g. unexpected cross-origin requests)[^1]. This can be very effective against cross-origin attacks like XSSI, XS-Leaks, Clickjacking, and CSRF if a strict policy is deployed on the server.&lt;/p></description></item><item><title>Cross-Origin-Opener-Policy</title><link>https://xsleaks.dev/docs/defenses/opt-in/coop/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/coop/</guid><description>&lt;p>Getting access to a website&amp;rsquo;s &lt;code>window&lt;/code> object is a common prerequisite for different XS-Leak techniques. &lt;a href="https://xsleaks.dev/docs/defenses/opt-in/xfo/">Framing Protections&lt;/a> can ensure that an attacker cannot use iframes to access the &lt;code>window&lt;/code> object, but this does not stop an attacker from accessing the &lt;code>window&lt;/code> object from an opened window through &lt;code>window.open(url)&lt;/code> or &lt;code>window.opener&lt;/code> references.&lt;/p>
&lt;p>Exploiting XS-Leaks with &lt;code>window.open&lt;/code> is generally seen as the least appealing option for an attacker because the user can see it happen in the open browser window. However, it&amp;rsquo;s usually the right technique when:&lt;/p></description></item><item><title>Cross-Origin-Resource-Policy</title><link>https://xsleaks.dev/docs/defenses/opt-in/corp/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/corp/</guid><description>&lt;p>Cross-Origin Resource Policy (CORP) is a web platform security feature that allows websites to prevent certain resources from being loaded by other origins. This protection complements CORB since it is an opt-in defense, whereas CORB blocks some cross-origin reads by default. CORP is designed to protect against both speculative execution attacks and XS-Leaks by allowing developers to ensure that sensitive resources cannot end up in attacker-controlled processes. Unlike CORB, this protection is enforced in the browser only if an application opts in to the protection. Applications can define which groups of origins (&amp;lsquo;same-site&amp;rsquo;, &amp;lsquo;same-origin&amp;rsquo;, &amp;lsquo;cross-site&amp;rsquo;) are allowed to read their resources.&lt;/p></description></item><item><title>Framing Protections</title><link>https://xsleaks.dev/docs/defenses/opt-in/xfo/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/xfo/</guid><description>&lt;p>A considerable number of XS-Leaks rely on some of the properties of iframes. If an attacker is unable to embed the contents of a page as an &lt;code>iframe&lt;/code>, &lt;code>frame&lt;/code>, &lt;code>embed&lt;/code> or &lt;code>object&lt;/code>, then the attack may no longer be possible. To mitigate XS-Leaks which rely on these objects, pages can forbid or select which origins can embed them. Doing so is possible by using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options">&lt;code>X-Frame-Options&lt;/code> header&lt;/a> or the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/frame-ancestors">CSP frame-ancestors directive&lt;/a>.&lt;/p></description></item><item><title>SameSite Cookies</title><link>https://xsleaks.dev/docs/defenses/opt-in/same-site-cookies/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/same-site-cookies/</guid><description>&lt;p>SameSite cookies are one of the most impactful modern security mechanisms for fixing security issues that involve cross-site requests. This mechanism allows applications to force browsers to only include cookies in requests that are issued same-site &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>. This type of cookie has three modes: &lt;code>None&lt;/code>, &lt;code>Lax&lt;/code>, and &lt;code>Strict&lt;/code>.&lt;/p>
&lt;h2 id="samesite-cookie-modes">
 SameSite Cookie Modes
 &lt;a class="anchor" href="#samesite-cookie-modes">#&lt;/a>
&lt;/h2>
&lt;p>The following SameSite cookie modes are available:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>None&lt;/code> â€“ Disables all protections and restores the old behavior of cookies. This mode is not recommended.&lt;/p></description></item><item><title>Document Policies</title><link>https://xsleaks.dev/docs/defenses/opt-in/document-policies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/defenses/opt-in/document-policies/</guid><description>&lt;p>&lt;code>Document-Policy&lt;/code> is an experimental mechanism, similar to another experimental Feature Policy &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>, used to cover features which are more about configuring a document, or removing features (sandboxing) from a document or a frame. &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup> It can be for example set in a header response as shown in the example below.&lt;/p>

 &lt;blockquote class="book-hint2 example">
 &lt;p class="hint-title example">
 &lt;svg class="book-icon">
 &lt;use href="https://xsleaks.dev/svg/hint-icons.svg#example-notice">&lt;/use>
 &lt;/svg>&lt;span>example&lt;/span>&lt;/p>
 Document-Policy: unsized-media=?0, document-write=?0, max-image-bpp=2.0, frame-loading=lazy
 &lt;/blockquote>


&lt;h1 id="forceloadattop">
 ForceLoadAtTop
 &lt;a class="anchor" href="#forceloadattop">#&lt;/a>
&lt;/h1>
&lt;p>The ForceLoadAtTop feature provides an opt-out for &lt;a href="https://xsleaks.dev/docs/attacks/experiments/scroll-to-text-fragment/">Scroll To Text&lt;/a> (and other load-on-scroll behaviors) for privacy sensitive sites. The feature allows sites to indicate that they should always be loaded at the top of the page, blocking any scroll-on-load behaviors including text fragments and element fragments. It can be set via &lt;code>Document-Policy: force-load-at-top&lt;/code> response header.&lt;/p></description></item></channel></rss>