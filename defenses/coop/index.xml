<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>COOP on XS-Leaks Wiki</title><link>https://xsleaks.dev/defenses/coop/</link><description>Recent content in COOP on XS-Leaks Wiki</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 10 May 2025 00:09:38 +0200</lastBuildDate><atom:link href="https://xsleaks.dev/defenses/coop/index.xml" rel="self" type="application/rss+xml"/><item><title>Window References</title><link>https://xsleaks.dev/docs/attacks/window-references/</link><pubDate>Thu, 08 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/window-references/</guid><description>&lt;p>If a page sets its &lt;code>opener&lt;/code> property to &lt;code>null&lt;/code> or is using &lt;a href="https://xsleaks.dev/docs/defenses/opt-in/coop/">COOP&lt;/a> protection depending on the users&amp;rsquo; state, it becomes possible to infer cross-site information about that state. For example, attackers can detect whether a user is logged in by opening an endpoint in an iframe (or a new window) which only authenticated users have access to, simply by checking its window reference. &lt;a href="https://xsinator.com/testing.html#COOP%20Leak">Run demo&lt;/a>&lt;/p>
&lt;h2 id="code-snippet">
 Code Snippet
 &lt;a class="anchor" href="#code-snippet">#&lt;/a>
&lt;/h2>
&lt;p>The below snippet demonstrates how to detect whether the &lt;code>opener&lt;/code> property was set to &lt;code>null&lt;/code>, or whether the &lt;a href="https://xsleaks.dev/docs/defenses/opt-in/coop/">COOP&lt;/a> header is present with a value other than &lt;code>unsafe-none&lt;/code>. This can be done with both iframes and new windows.&lt;/p></description></item><item><title>Frame Counting</title><link>https://xsleaks.dev/docs/attacks/frame-counting/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/frame-counting/</guid><description>&lt;p>Window references allow cross-origin pages to get access to some of the attributes of other pages. These references become available when using or allowing &lt;code>iframe&lt;/code> and &lt;code>window.open&lt;/code>. The references provide (limited) information about the window as they still respect the same-origin policy.&lt;/p>
&lt;p>One of the accessible attributes is &lt;code>window.length&lt;/code> which provides the number of frames in the window. This attribute can provide valuable information about a page to an attacker.&lt;/p></description></item><item><title>Navigations</title><link>https://xsleaks.dev/docs/attacks/navigations/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/navigations/</guid><description>&lt;p>Detecting if a cross-site page triggered a navigation (or didn&amp;rsquo;t) can be useful to an attacker. For example, a website may trigger a navigation in a certain endpoint &lt;a href="#case-scenarios">depending on the status of the user&lt;/a>.&lt;/p>
&lt;p>To detect if any kind of navigation occurred, an attacker can:&lt;/p>
&lt;ul>
&lt;li>Use an &lt;code>iframe&lt;/code> and count the number of times the &lt;code>onload&lt;/code> event is triggered.&lt;/li>
&lt;li>Check the value of &lt;code>history.length&lt;/code>, which is accessible through any window reference. This provides the number of entries in the history of a victim that were either changed by &lt;code>history.pushState&lt;/code> or by regular navigations. To get the value of &lt;code>history.length&lt;/code>, an attacker changes the location of the window reference to the target website, then changes back to same-origin, and finally reads the value. &lt;a href="https://xsinator.com/testing.html#History%20Length%20Leak">Run demo&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="download-trigger">
 Download Trigger
 &lt;a class="anchor" href="#download-trigger">#&lt;/a>
&lt;/h2>
&lt;p>When an endpoint sets the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition">&lt;code>Content-Disposition: attachment&lt;/code>&lt;/a> header, it instructs the browser to download the response as an attachment instead of navigating to it. Detecting if this behavior occurred might allow attackers to leak private information if the outcome depends on the state of the victim&amp;rsquo;s account.&lt;/p></description></item><item><title>Network Timing</title><link>https://xsleaks.dev/docs/attacks/timing-attacks/network-timing/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/timing-attacks/network-timing/</guid><description>&lt;p>Network Timing side-channels have been present on the web since its inception &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> &lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>. These attacks have had different levels of impact over time, gaining new attention when browsers started shipping high-precision timers like &lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/clocks/#performancenow">performance.now()&lt;/a>.&lt;/p>
&lt;p>To obtain timing measurements, attackers must use a &lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/clocks/">clock&lt;/a>, either an implicit or an explicit one. These clocks are usually interchangeable for the purposes of XS-Leaks and only vary in accuracy and availability. For simplicity, this article assumes the use of the &lt;code>performance.now()&lt;/code> API, an explicit clock present in all modern browsers.&lt;/p></description></item><item><title>Execution Timing</title><link>https://xsleaks.dev/docs/attacks/timing-attacks/execution-timing/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/timing-attacks/execution-timing/</guid><description>&lt;p>Measuring the time of JavaScript execution in a browser can give attackers information on when certain events are triggered, and how long some operations take.&lt;/p>
&lt;h2 id="timing-the-event-loop">
 Timing the Event Loop
 &lt;a class="anchor" href="#timing-the-event-loop">#&lt;/a>
&lt;/h2>
&lt;p>JavaScript&amp;rsquo;s concurrency model is based on a &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">single-threaded event loop&lt;/a> which means it can only run one task at a time. If, for example, some time-consuming task blocks the event loop, the user can perceive a freeze on a page as a result of the UI thread being starved. Other tasks must wait until the blocking task finishes. Each browser implements different &lt;a href="https://chromium.googlesource.com/chromium/src/&amp;#43;/main/docs/process_model_and_site_isolation.md">process models&lt;/a>, which means some web sites might run in different threads (and event loops) depending on their relations.&lt;/p></description></item><item><title>Hybrid Timing</title><link>https://xsleaks.dev/docs/attacks/timing-attacks/hybrid-timing/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/timing-attacks/hybrid-timing/</guid><description>&lt;p>Hybrid Timing Attacks allow attackers to measure the sum of a group of factors that influence the final timing measurement. These factors include:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/network-timing/">Network delays&lt;/a>&lt;/li>
&lt;li>Document parsing&lt;/li>
&lt;li>Retrieval and processing of subresources&lt;/li>
&lt;li>&lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/execution-timing/">Code execution&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Some of the factors differ in value depending on the application. This means that &lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/network-timing/">Network Timing&lt;/a> might be more significant for pages with more backend processing, while &lt;a href="https://xsleaks.dev/docs/attacks/timing-attacks/execution-timing/">Execution Timing&lt;/a> can be more significant in applications processing and displaying data within the browser. Attackers can also eliminate some of these factors to obtain more precise measurements. For example, an attacker could preload all of the subresources by embedding the page as an &lt;code>iframe&lt;/code> (forcing the browser to cache the subresources) and then perform a second measurement, which excludes any delay introduced by the retrieval of those subresources.&lt;/p></description></item></channel></rss>