<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Nosniff on XS-Leaks Wiki</title><link>https://xsleaks.dev/abuse/nosniff/</link><description>Recent content in Nosniff on XS-Leaks Wiki</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 21 Apr 2024 20:35:32 +0100</lastBuildDate><atom:link href="https://xsleaks.dev/abuse/nosniff/index.xml" rel="self" type="application/rss+xml"/><item><title>CORB Leaks</title><link>https://xsleaks.dev/docs/attacks/browser-features/corb/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/browser-features/corb/</guid><description>&lt;p>&lt;a href="https://xsleaks.dev/docs/defenses/secure-defaults/corb/">Cross-Origin Read Blocking&lt;/a> (CORB) is a web platform security feature aimed at reducing the impact of speculative side-channel attacks such as Spectre. Unfortunately, blocking certain types of requests introduced a new type of XS-Leaks &lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> that allows attackers to detect if CORB was enforced on one request, but wasn&amp;rsquo;t on another. Nevertheless, the introduced XS-Leaks are much less problematic than the issues actively protected by CORB (e.g. Spectre).&lt;/p>

 &lt;blockquote class="book-hint2 info">
 &lt;p class="hint-title info">
 &lt;svg class="book-icon">
 &lt;use href="https://xsleaks.dev/svg/hint-icons.svg#info-notice">&lt;/use>
 &lt;/svg>&lt;span>info&lt;/span>&lt;/p></description></item><item><title>Error Events</title><link>https://xsleaks.dev/docs/attacks/error-events/</link><pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate><guid>https://xsleaks.dev/docs/attacks/error-events/</guid><description>&lt;p>When a webpage issues a request to a server (e.g. fetch, HTML tags), the server receives and processes this request. When received, the server decides whether the request should succeed (e.g. 200) or fail (e.g. 404) based on the provided context. When a response has an error status, an &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/error_event">error event&lt;/a> is fired by the browser for the page to handle. These errors also cover situations where the parser fails, for example when trying to embed &lt;code>HTML&lt;/code> content as an image.&lt;/p></description></item></channel></rss>